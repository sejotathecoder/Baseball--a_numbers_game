return("Neither string contains the letter z.")
} else if (count_one == count_two) {
return("The strings must have the same number of Zs.")
} else if (count_one > count_two) {
return(string_one)
} else {
return(string_two)
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("pizzazz", "zanzibar")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
str_replace_all(vector_of_strings, "[01234567890]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(sprintf("%f fluid ounces is %f gallon(s), %f quart(s), %f pint(s),
and %f gill(s).", fluid_oz, gallons, quarts, pints, gills))
}
# Write a function `parks_and_rec()` that takes in two args (`weeks`, `hrs`) to
# calculate how many episodes of the show "Parks and Rec" you can watch within a
# given time frame. The weeks arg is how many weeks they have to watch and the
# hrs arg is how many hours of TV they watch a day. Assuming that each episode
# is 21 minutes long, how many episodes can the user watch?
# Return the number of episodes as an numeric type.
parks_and_rec <- function(weeks, hrs) {
return(floor(hrs * 60 * 7 * weeks / 21))
}
fluidConversion(6523)
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- round(floor(fluid_oz / 128), 0)
fluid_oz_rem <- fluid_oz %% 128
quarts <- round(floor(fluid_oz / 32), 0)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- round(floor(fluid_oz / 16), 0)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- round(floor(fluid_oz / 4), 0)
fluid_oz_rem <- fluid_oz_rem %% 4
return(sprintf("%f fluid ounces is %f gallon(s), %f quart(s), %f pint(s),
and %f gill(s).", fluid_oz, gallons, quarts, pints, gills))
}
fluidConversion(6523)
View(fluidConversion)
View(fluidConversion)
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128), 0)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32), 0)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16), 0)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4), 0)
fluid_oz_rem <- fluid_oz_rem %% 4
return(sprintf("%f fluid ounces is %f gallon(s), %f quart(s), %f pint(s),
and %f gill(s).", fluid_oz, gallons, quarts, pints, gills))
}
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(sprintf("%f fluid ounces is %f gallon(s), %f quart(s), %f pint(s),
and %f gill(s).", fluid_oz, gallons, quarts, pints, gills))
}
fluidConversion(6523)
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(sprintf("%f.0 fluid ounces is %f.0 gallon(s), %f.0 quart(s), %f.0 pint(s),
and %f.0 gill(s).", fluid_oz, gallons, quarts, pints, gills))
}
fluidConversion(6523)
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(sprintf("%.0f fluid ounces is %.0f gallon(s), %.0f quart(s), %.0f pint(s),
and %.0f gill(s).", fluid_oz, gallons, quarts, pints, gills))
}
fluidConversion(6523)
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(sprintf("%.0f fluid ounces is %.0f gallon(s), %.0f quart(s), %.0f pint(s),
and %.0f gill(s).", fluid_oz, gallons, quarts, pints, gills))
}
fluidConversion(6523)
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(paste0(fluid_oz, "fluid ounces is", gallons, "gallon(s),", quarts,
"quart(s),", pints, "pint(s), and", gills, "gill(s)."))
}
fluidConversion(6523)
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(paste0(fluid_oz, " fluid ounces is ", gallons, " gallon(s), ", quarts,
" quart(s), ", pints, " pint(s), and ", gills, " gill(s)."))
}
fluidConversion(6523)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
source("~/Documents/School/Classes/University of Washington/Summer 2022/INFO 201/a1---foundational-skills-collinpucher/Assignment.r")
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
make_introduction <- function(name, age) {
return(print(sprintf("Hello, my name is %s, and I'm %s years old.", name, age))
}
return(print(sprintf("Hello, my name is %s, and I'm %s years old.", name, age)))
source("~/Documents/School/Classes/University of Washington/Summer 2022/INFO 201/a1---foundational-skills-collinpucher/Assignment.r")
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 22
# Create a variable `my_name` that is equal to your first name
my_name <- "Collin"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
return(print(sprintf("Hello, my name is %s, and I'm %s years old.", name, age)))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Create a function `inches_to_cm` that converts from inches to centimeters and
# returns the converted value in cm
inches_to_cm <- function(inches){
return(inches * 2.54)
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 70
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string_one, string_two){
count_one <- str_count(str_to_lower(string_one), "z")
count_two <- str_count(str_to_lower(string_two), "z")
if (count_one == 0 & count_two == 0) {
return("Neither string contains the letter z.")
} else if (count_one == count_two) {
return("The strings must have the same number of Zs.")
} else if (count_one > count_two) {
return(string_one)
} else {
return(string_two)
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("pizzazz", "zanzibar")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
str_replace_all(vector_of_strings, "[01234567890]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluidConversion <- function(fluid_oz){
gallons <- floor(fluid_oz / 128)
fluid_oz_rem <- fluid_oz %% 128
quarts <- floor(fluid_oz_rem / 32)
fluid_oz_rem <- fluid_oz_rem %% 32
pints <- floor(fluid_oz_rem / 16)
fluid_oz_rem <- fluid_oz_rem %% 16
gills <- floor(fluid_oz_rem / 4)
fluid_oz_rem <- fluid_oz_rem %% 4
return(print(paste0(fluid_oz, " fluid ounces is ", gallons, " gallon(s), ", quarts,
" quart(s), ", pints, " pint(s), and ", gills, " gill(s).")))
}
# Write a function `parks_and_rec()` that takes in two args (`weeks`, `hrs`) to
# calculate how many episodes of the show "Parks and Rec" you can watch within a
# given time frame. The weeks arg is how many weeks they have to watch and the
# hrs arg is how many hours of TV they watch a day. Assuming that each episode
# is 21 minutes long, how many episodes can the user watch?
# Return the number of episodes as an numeric type.
parks_and_rec <- function(weeks, hrs) {
return(print(floor(hrs * 60 * 7 * weeks / 21)))
}
library(shiny)
library(tidyverse)
rm(ontariohunting)
rm(cm_tall)
setwd("~/Documents/School/Classes/University of Washington/Summer 2022/INFO 201/Lecture 12")
char_df <- read.csv("characters.csv")
View(char_df)
runApp()
runApp()
library(baseballr)
mlb_1920_41 <- bref_daily_batter("1920-01-01", "1941-12-31")
setwd("~/Documents/School/Classes/University of Washington/Summer 2022/INFO 201/Baseball--a_numbers_game")
rm(mlb_1920_41)
library(tidyverse)
library(plotly)
mlb_1920_42 <- read.csv("data/Batters1920to1942.csv")
View(mlb_1920_42)
View(mlb_1920_42)
mlb_1920_42 <- filter(mlb_1920_42, PA > 50)
View(mlb_1920_42)
mlb_1920_42$SB/G <- mlb_1920_42$SB / mlb_1920_42$G
View(mlb_1920_42)
mlb_1920_42 <- mlb_1920_42 %>% mutate(SBperG = (SB / G)) %>% head()
mlb_1920_42 <- read.csv("data/Batters1920to1942.csv")
mlb_1920_42 <- filter(mlb_1920_42, PA > 50)
mlb_1920_42 <- mlb_1920_42 %>% mutate(SBperG = (SB / G))
View(mlb_1920_42)
mlb_1920_42 <- mlb_1920_42 %>% mutate(HRperPA = (HR / PA))
View(mlb_1920_42)
power_speed_plot <- ggplot(data = mlb_1920_42, aes(SBperG, HRperPA, label = Name)) +
geom_point(aes(size = PA)) + labs(x = "Stolen bases per game",
y = "Home runs per plate
appearance", title = "Power
and speed")
power_speed_plotly <- plotly(power_speed_plot)
power_speed_plotly <- ggplotly(power_speed_plot)
power_speed_plot <- ggplot(data = mlb_1920_42, aes(SBperG, HRperPA, label = Player)) +
geom_point(aes(size = PA)) + labs(x = "Stolen bases per game",
y = "Home runs per plate
appearance", title = "Power
and speed")
power_speed_plotly <- ggplotly(power_speed_plot)
power_speed_plotly
power_speed_plot <- ggplot(data = mlb_1920_42, aes(SBperG, HRperPA, label = Player)) +
geom_point(aes(size = PA)) + labs(x = "Stolen bases per game",
y = "Home runs per plate appearance",
title = "Power and speed")
power_speed_plotly <- ggplotly(power_speed_plot)
power_speed_plotly
library(tidyverse)
library(plotly)
mlb_1920_42 <- read.csv("data/Batters1920to1942.csv")
mlb_1920_42 <- filter(mlb_1920_42, PA > 50)
mlb_1920_42 <- filter(mlb_1920_42, SB > 1 || HR > 5)
mlb_1920_42 <- mlb_1920_42 %>% mutate(SBperG = (SB / G))
mlb_1920_42 <- mlb_1920_42 %>% mutate(HRperPA = (HR / PA))
power_speed_plot <- ggplot(data = mlb_1920_42, aes(SBperG, HRperPA, label = Player)) +
geom_point(aes(size = PA)) + labs(x = "Stolen bases per game",
y = "Home runs per plate appearance",
title = "Power and speed")
power_speed_plotly <- ggplotly(power_speed_plot)
power_speed_plotly
mlb_1920_42 <- read.csv("data/Batters1920to1942.csv")
mlb_1920_42 <- filter(mlb_1920_42, PA > 100)
mlb_1920_42 <- filter(mlb_1920_42, SB > 1 || HR > 5)
mlb_1920_42 <- mlb_1920_42 %>% mutate(SBperG = (SB / G))
mlb_1920_42 <- mlb_1920_42 %>% mutate(HRperPA = (HR / PA))
power_speed_plot <- ggplot(data = mlb_1920_42, aes(SBperG, HRperPA, label = Player)) +
geom_point(aes(size = PA)) + labs(x = "Stolen bases per game",
y = "Home runs per plate appearance",
title = "Power and speed")
power_speed_plotly <- ggplotly(power_speed_plot)
power_speed_plotly
mlb_1920_42 <- read.csv("data/Batters1920to1942.csv")
mlb_1920_42 <- filter(mlb_1920_42, PA > 100)
mlb_1920_42 <- filter(mlb_1920_42, SB > 10 || HR > 10)
mlb_1920_42 <- mlb_1920_42 %>% mutate(SBperG = (SB / G))
mlb_1920_42 <- mlb_1920_42 %>% mutate(HRperPA = (HR / PA))
power_speed_plot <- ggplot(data = mlb_1920_42, aes(SBperG, HRperPA, label = Player)) +
geom_point(aes(size = PA)) + labs(x = "Stolen bases per game",
y = "Home runs per plate appearance",
title = "Power and speed")
power_speed_plotly <- ggplotly(power_speed_plot)
power_speed_plotly
library(tidyverse)
library(plotly)
mlb_1920_42 <- read.csv("data/Batters1920to1942.csv")
mlb_1920_42 <- filter(mlb_1920_42, PA > 100)
mlb_1920_42 <- filter(mlb_1920_42, SB > 20 || HR > 20)
mlb_1920_42 <- mlb_1920_42 %>% mutate(SBperG = (SB / G))
mlb_1920_42 <- mlb_1920_42 %>% mutate(HRperPA = (HR / PA))
power_speed_plot <- ggplot(data = mlb_1920_42, aes(SBperG, HRperPA, label = Player)) +
geom_point(aes(size = PA)) + labs(x = "Stolen bases per game",
y = "Home runs per plate appearance",
title = "Power and speed")
power_speed_plotly <- ggplotly(power_speed_plot)
power_speed_plotly
library(tidyverse)
library(plotly)
negro_league_1920_48_pitching <- read.csv("data/NegroLeaguePitchers1920to1948.csv")
View(negro_league_1920_48_pitching)
negro_league_1920_48_pitching <- read.csv("data/NegroLeaguePitchers1920to1948.csv")
View(negro_league_1920_48_pitching)
install.packages("fmsb")
library(fmsb)
pitching_tri <- negro_league_1920_48_pitching[,34:36]
View(pitching_tri)
pitching_tri <- negro_league_1920_48_pitching[,(2, 34:36)]
pitching_tri <- negro_league_1920_48_pitching[,(2, 34, 35, 36)]
pitching_tri <- negro_league_1920_48_pitching[,c(2, 34, 35, 36)]
View(pitching_tri)
min(pitching_tri$HR9)
max(pitching_tri$HR9)
min(na.omit(pitching_tri$HR9)
min(na.omit(pitching_tri$HR9))
max(na.omit(pitching_tri$HR9))
min(na.omit(pitching_tri$BB9))
max(na.omit(pitching_tri$BB9))
min(na.omit(pitching_tri$SO9))
max(na.omit(pitching_tri$SO9))
max_min <- data.frame(HR9 = c(1.4, 0), BB9 = c(10.1, 1.1), SO9 = c(10.1, 1.3))
rownames(max_min) <- c("Max", "Min")
pitching_tri <- rbind(max_min, pitching_tri)
View(max_min)
max_min <- data.frame(Player = c("", ""), HR9 = c(1.4, 0), BB9 = c(10.1, 1.1), SO9 = c(10.1, 1.3))
rownames(max_min) <- c("Max", "Min")
View(pitching_tri)
pitching_tri <- rbind(max_min, pitching_tri)
View(pitching_tri)
pitching_tri_2 <- pitching_tri[,-1]
rownames(pitching_tri_2) <- pitching_tri[,-1]
max_min <- data.frame(Player = c("Max", "Min"), HR9 = c(1.4, 0), BB9 = c(10.1, 1.1), SO9 = c(10.1, 1.3))
rownames(max_min) <- c("Max", "Min")
pitching_tri <- rbind(max_min, pitching_tri)
pitching_tri_2 <- pitching_tri[,-1]
rownames(pitching_tri_2) <- pitching_tri[,-1]
View(pitching_tri_2)
pitching_tri <- negro_league_1920_48_pitching[,c(2, 34, 35, 36)]
max_min <- data.frame(Player = c("Max", "Min"), HR9 = c(1.4, 0), BB9 = c(10.1, 1.1), SO9 = c(10.1, 1.3))
rownames(max_min) <- c("Max", "Min")
pitching_tri <- rbind(max_min, pitching_tri)
pitching_tri_2 <- pitching_tri[,-1]
rownames(pitching_tri_2) <- pitching_tri[,-1]
View(pitching_tri_2)
rownames(pitching_tri_2) <- pitching_tri[,1]
rm(pitching_tri_w)
rm(pitching_tri_2)
radarchart(pitching_tri[c("Max", "Min", 1), ])
pitching_tri_2 <- pitching_tri[,-1]
radarchart(pitching_tri_2[c("Max", "Min", 1), ])
radarchart(pitching_tri_2[c("Max", "Min", 11), ])
radarchart(pitching_tri_2[c("Max", "Min", 11), ], pcol = "#fdc086")
radarchart(pitching_tri_2[c("Max", "Min", 11), ], pcol = "#7fc97f", pfcol = "#7fc97f")
?radarchart
radarchart(pitching_tri_2[c("Max", "Min", 11), ], pcol = "#7fc97f", pfcol = "#7fc97f", title = "Satchel Paige")
radarchart(pitching_tri_2[c("Max", "Min", 11), ], pcol = "#7fc97f", pfcol = "#7fc97f", title = "Satchel Paige")
install.packages("ggradar")
